1. Point Accuracy Test:
Objective: To determine how accurately the touchscreen detects the exact point of touch.
Method: Create a grid of small target points on the screen. Ask users to touch each point precisely. Record the reported touch coordinates and compare them with the actual target coordinates.
Assessment: Measure the deviation between the target and reported touch points to evaluate accuracy.

2. Line Drawing Test:
Objective: To assess the touchscreen's ability to track linear movement accurately.
Method: Implement a drawing feature where users can draw straight lines on the touchscreen. Analyze the linearity of the drawn lines.
Assessment: Check for breaks or jitter in the lines, which could indicate issues with precision or tracking.

3. Multi-Touch Test:
Objective: To evaluate the touchscreen's multi-touch capabilities and how well it can track multiple points simultaneously.
Method: Create an interface where users can use multiple fingers to interact with the screen, such as pinching or spreading gestures. Track the movements and positions of all touch points.
Assessment: Look for accuracy in the recognition of multi-touch gestures and the ability to track each 
touch point independently.

4. Gesture Recognition Test:
Objective: To test the touchscreen's ability to recognize complex gestures.
Method: Implement simple gesture recognition (like swipes, circles, or figure eights) and ask users to perform these gestures. Record the systemâ€™s ability to recognize them accurately.
Assessment: Determine the success rate of gesture recognition and note any common errors or misinterpretations.

5. Speed and Responsiveness Test:
Objective: To assess how quickly and smoothly the touchscreen responds to touch.
Method: Implement fast swipe gestures or rapid tapping. Measure the response time and track the fluidity of motion.
Assessment: Note any lag or delay in response, which could impact the user experience.

6. User Experience Feedback:
Objective: To gather subjective feedback on the touchscreen's performance.
Method: After users perform the tests, ask for their feedback on the ease of use, accuracy, and any difficulties they experienced.
Assessment: Use the feedback to gauge overall user satisfaction and identify areas for improvement.

---------- About detecting multiple fingers at the same time------------------------------------------------------------------------
Addressing the Software Aspect:
Multiple Touch Points Handling:

The current setup probably captures only the latest touch event, hence the single circle. Modify the code to maintain a list or array of active touch points. Each touch point should have its own coordinates and state (active/inactive).
Drawing Multiple Circles:

In the draw() function, iterate over each active touch point and draw a circle at each location. This will result in multiple circles being drawn on the screen, one for each active touch.
Updating Touch Points:

In the update() function or the relevant touch event handlers, update the coordinates of each active touch point as they move.
Handling Erratic Behavior:

The random appearance of circles in untouched areas could be due to noise or inaccuracies in the touch data. Implementing smoothing algorithms or touch data validation (like debouncing) could help.
Addressing the Hardware Limitations:
Performance Test: The erratic behavior and limitations in tracking multiple fingers might also stem from hardware constraints of the touchscreen, particularly its ability to accurately and consistently track multiple simultaneous touches.
Touchscreen Specs: Ensure that the touchscreen is indeed capable of precise multitouch tracking. Some screens might have limitations in how they handle multitouch or could be prone to errors with rapid movements or close-proximity touches.
Calibration: Check if the touchscreen requires calibration to improve accuracy.
